[gd_resource type="VisualShader" load_steps=5 format=3 uid="uid://dugtrp8ej1uvx"]

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_6aj5p"]
expanded_output_ports = [0]
parameter_name = "Tint"
default_value_enabled = true
default_value = Color(1, 1, 1, 0.501961)

[sub_resource type="VisualShaderNodeBooleanParameter" id="VisualShaderNodeBooleanParameter_e7qhc"]
parameter_name = "Enabled"
default_value_enabled = true

[sub_resource type="VisualShaderNodeIf" id="VisualShaderNodeIf_8uvay"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_qhtle"]
input_name = "color"

[resource]
resource_local_to_scene = true
code = "shader_type canvas_item;
render_mode blend_mix;

uniform bool Enabled = false;
uniform vec4 Tint : source_color = vec4(1.000000, 1.000000, 1.000000, 0.501961);



void fragment() {
// BooleanParameter:3
	bool n_out3p0 = Enabled;


// ColorParameter:2
	vec4 n_out2p0 = Tint;


// Input:5
	vec4 n_out5p0 = COLOR;


	vec3 n_out4p0;
// If:4
	float n_in4p1 = 0.00000;
	float n_in4p2 = 0.00001;
	if(abs((n_out3p0 ? 1.0 : 0.0) - n_in4p1) < n_in4p2)
	{
		n_out4p0 = vec3(n_out2p0.xyz);
	}
	else if((n_out3p0 ? 1.0 : 0.0) < n_in4p1)
	{
		n_out4p0 = vec3(n_out5p0.xyz);
	}
	else
	{
		n_out4p0 = vec3(n_out5p0.xyz);
	}


// Output:0
	COLOR.rgb = n_out4p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(600, 240)
nodes/fragment/2/node = SubResource("VisualShaderNodeColorParameter_6aj5p")
nodes/fragment/2/position = Vector2(-1320, 520)
nodes/fragment/3/node = SubResource("VisualShaderNodeBooleanParameter_e7qhc")
nodes/fragment/3/position = Vector2(-960, 140)
nodes/fragment/4/node = SubResource("VisualShaderNodeIf_8uvay")
nodes/fragment/4/position = Vector2(-360, 120)
nodes/fragment/5/node = SubResource("VisualShaderNodeInput_qhtle")
nodes/fragment/5/position = Vector2(-700, 720)
nodes/fragment/connections = PackedInt32Array(3, 0, 4, 0, 2, 0, 4, 3, 4, 0, 0, 0, 5, 0, 4, 4, 5, 0, 4, 5)
